<?php

class MyInodeFree {
	
	var $file;
	var $path;
	var $realPath;
	var $lastAccess;
	var $lastChangedFile;
	var $lastChangedContent;
	var $permission;
	var $writable;
	var $readable;
	var $size;
	var $type;
	
	public function __construct( $_path ) {
		$this->path               = $_path ;		
		if( is_file( $_path ) ) {
			$this->file               = basename( $_path ) ;
			$this->size               = filesize( $this->path );
			$this->type               = 'file';
		}
		elseif( is_dir( $_path ) ) {
			$this->type               = 'dir';
		}
		else {
			throw new Exception($_file . ' is not a file.');
		}
		
		$this->realPath           = realpath( $this->path ) ;
		$this->lastAccess         = strftime( "%d/%m/%y", fileatime( $this->path ) ) ;
		$this->lastChangedFile    = strftime( "%d/%m/%y", filectime( $this->path ) ) ;
		$this->lastChangedContent = strftime( "%d/%m/%y", filemtime( $this->path ) ) ;
		$this->permission         = substr(sprintf( '%o', fileperms( $this->path ) ), -4) ;
		$this->writable           = is_writable($this->path );
		$this->readable           = is_readable($this->path );
		
	}
	
}

class MyInodeDir {

}
 
/**
 * Liste et retourne tous les dossiers et fichiers d'une arborescence
 *
 * Retourne tous les fichiers et dossiers d'une arborescence sous forme de tableau.
 *
 *
 * @author	   Inwebo
 * @copyright  Inwebo
 * @license    http://creativecommons.org/licenses/by-nc-sa/2.0/fr/
 * @version    24.04.11
 * @link       http://inwebo.free.fr
 * @since      Avril 2011
 * @modified   24 04 2011
 */

class Scandir {

	/**
    * @var	STRING
    * @desc Path to directory to list
    */
	public $path;

	/**
    * @var	INT
    * @desc Total files in $path
    */
	public $totalFiles;

	/**
    * @var	INT
    * @desc Total dirs in $path
    */
	public $totalDirs;

	/**
    * @var	INT
    * @desc Total size in octects
    */
	public $totalSize;

	/**
    * @var	ARRAY
    * @desc List of all items in $path
    */
	public $ret;

    /**
     * Instanciation de la class, création de l'arborescence du dossier $path COMPATIBLE free.fr
	 *
	 * @arguments	$path			STRING	Chemin d'accés d'un dossier à lister récursivement
	 *
	 * @return    	$ret			ARRAY	Un tableau d'objet MyInode, sous la forme
	 * 										array(	"Dirs" = array ("Objet 1",
	 *																"Objet 2',
	 *																etc),
	 *												"Files" = array ("Objet 1",
	 *																"Objet 2',
	 *																etc)
	 *											)
	 *
	 * @throw		EXCEPTION				Émet une exception UnexpectedValueException si le chemin $path est introuvable.
	 *
     */

	public function __construct( $path, $root = 'public' ) {

		$this->path          = $path ;
		$this->root          = $root ;
		$this->ret		       = array() ;
		$this->totalFiles    = 0 ;
		$this->totalDirs     = 0 ;
		$this->totalSize     = 0 ;

		$j = -1;
		/*if( is_dir($this->path) ) {
			$files = scandir( $this->path );
		}
		else {
			throw new Exception($this->path . ' is not a dir.');
		}*/
		$files = @scandir( $this->path );
		while( isset($files[++$j]) ) {

			if( $files[$j] !== "." && $files[$j] !== ".." && is_dir( $this->path . '/' . $files[$j]) ) {

				$this->ret["Dirs"][$this->totalDirs++] = array(
								"Name" => $files[$j],
								"Real path" => realpath( $this->path . '/' . $files[$j] ),
								"Path" => $this->path,
								"Path info" => NULL ,
								"Path name" => $this->path . $files[$j],
								"Last access" => strftime( "%d/%m/%y", fileatime( $this->path . '/' . $files[$j] ) ) ,
								"Last changed file" => strftime( "%d/%m/%y", filectime( $this->path . '/' . $files[$j] ) ) ,
								"Last changed content" => strftime( "%d/%m/%y", filemtime( $this->path . '/' . $files[$j] ) ),
								"Permission" => substr(sprintf('%o', fileperms( $this->path . '/' . $files[$j] ) ), -4) ,
								"Type" => "Dir" ,
								"Writable"=> is_writable( $this->path . '/' . $files[$j] ) ,
								"Readable" => is_readable( $this->path . '/' . $files[$j] ),
								"Size" => NULL
							   );
				$this->all[] = $this->ret["Dirs"];
				//$this->totalDirs++;
			}
			elseif( $files[$j] !== "." && $files[$j] !== ".." && is_file( $this->path . '/' . $files[$j]) ) {
				$this->ret["Files"][$this->totalFiles++] = array(
								"Name" => $files[$j],
								"Real path" => realpath( $this->path . '/' . $files[$j] ),
								"Path" => $this->path,
								"Path info" => NULL ,
								"Path name" => $this->path . $files[$j],
								"Last access" => strftime( "%d/%m/%y", fileatime( $this->path . '/' . $files[$j] ) ) ,
								"Last changed file" => strftime( "%d/%m/%y", filectime( $this->path . '/' . $files[$j] ) ) ,
								"Last changed content" => strftime( "%d/%m/%y", filemtime( $this->path . '/' . $files[$j] ) ),
								"Permission" => substr(sprintf('%o', fileperms( $this->path . '/' . $files[$j] ) ), -4) ,
								"Type" => "Files" ,
								"Writable"=> is_writable( $this->path . '/' . $files[$j] ) ,
								"Readable" => is_readable( $this->path . '/' . $files[$j] ) ,
								"Size" => filesize( $this->path . '/' . $files[$j] )
							   );
				$this->totalSize += filesize( $this->path . '/' . $files[$j] );
				//$this->totalFiles++;
			}

		}
	}

	private function isValidPath() {

	}

	public function getTree() {
		return $this->ret;
	}

    /**
     * Affichage de l'arborescence de $path, sous forme de liste ordonnée HTML.
	 *
	 * @arguments	VOID
	 *
	 * @return    	$output		ARRAY	Un tableau d'objet MyInode
	 *
     */
	/*public function __toString() {

		$output = '<ul>';
		$output .= '<li>' . $this->path . '</li><li>';
		if( isset( $this->ret["Dirs"] ) ) {
			$j = 0;
			$output .= "<ul>";
			foreach( $this->ret["Dirs"] as $info ) {
				$output .= '<li>' . $info . '</li>' ;
				++$j;
			}
			$output .= "</ul>";
		}
		$output .= "</li><li><ul>";
		if( isset( $this->ret["Files"] ) ) {
			$k = 0;

			foreach( $this->ret["Files"] as $info ) {
				$output .= '<li>' . $info . '</li>' ;
				++$k;
			}

		}
		$output .= "</ul></li>";
		$output .= '<li>' . $this->totalSize . ' o, file(s) ' . $this->totalFiles . ', dir(s) ' . $this->totalDirs . '</li></ul>' ;

		return $output;
	}*/
}

?>
